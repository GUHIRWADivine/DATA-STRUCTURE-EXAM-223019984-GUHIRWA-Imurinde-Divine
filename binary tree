class TreeNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, key, value):
        if not self.root:
            self.root = TreeNode(key, value)
        else:
            self._insert(self.root, key, value)

    def _insert(self, node, key, value):
        if key < node.key:
            if node.left is None:
                node.left = TreeNode(key, value)
            else:
                self._insert(node.left, key, value)
        elif key > node.key:
            if node.right is None:
                node.right = TreeNode(key, value)
            else:
                self._insert(node.right, key, value)
        else:
            node.value = value  # Update the value if the key already exists

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if node is None or node.key == key:
            return node
        if key < node.key:
            return self._search(node.left, key)
        return self._search(node.right, key)

    def in_order_traversal(self):
        elements = []
        self._in_order_traversal(self.root, elements)
        return elements

    def _in_order_traversal(self, node, elements):
        if node:
            self._in_order_traversal(node.left, elements)
            elements.append((node.key, node.value))
            self._in_order_traversal(node.right, elements)

# Example usage:
inventory = BinaryTree()
inventory.insert("apple", {"price": 1.0, "stock": 50})
inventory.insert("banana", {"price": 0.5, "stock": 100})
inventory.insert("carrot", {"price": 0.2, "stock": 200})

# Search for an item
item = inventory.search("banana")
if item:
    print(f"Item found: {item.key}, Price: {item.value['price']}, Stock: {item.value['stock']}")
else:
    print("Item not found")

# Display the inventory in order
print("Inventory:", inventory.in_order_traversal())
